(function() {
    var type_impls = Object.fromEntries([["quilkin",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-TypeMap%3CS%3E\" class=\"impl\"><a href=\"#impl-Clone-for-TypeMap%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for TypeMap&lt;S&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;S&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; TypeMap&lt;S&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.0/src/core/clone.rs.html#174\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","quilkin::config::ConfigMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-TypeMap%3CS%3E\" class=\"impl\"><a href=\"#impl-Debug-for-TypeMap%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for TypeMap&lt;S&gt;<div class=\"where\">where\n    S: DebuggableStorage + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.85.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","quilkin::config::ConfigMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-TypeMap%3CS%3E\" class=\"impl\"><a href=\"#impl-Default-for-TypeMap%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for TypeMap&lt;S&gt;<div class=\"where\">where\n    S: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; TypeMap&lt;S&gt;</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.85.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","quilkin::config::ConfigMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C(TypeId,+Box%3CS%3E)%3E-for-TypeMap%3CS%3E\" class=\"impl\"><a href=\"#impl-Extend%3C(TypeId,+Box%3CS%3E)%3E-for-TypeMap%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;(<a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/core/any/struct.TypeId.html\" title=\"struct core::any::TypeId\">TypeId</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;S&gt;)&gt; for TypeMap&lt;S&gt;<div class=\"where\">where\n    S: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;T&gt;(&amp;mut self, iter: T)<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = (<a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/core/any/struct.TypeId.html\" title=\"struct core::any::TypeId\">TypeId</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;S&gt;)&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.0/src/core/iter/traits/collect.rs.html#420\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.0/src/core/iter/traits/collect.rs.html#428\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<(TypeId, Box<S>)>","quilkin::config::ConfigMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3C(TypeId,+Box%3CS%3E)%3E-for-TypeMap%3CS%3E\" class=\"impl\"><a href=\"#impl-FromIterator%3C(TypeId,+Box%3CS%3E)%3E-for-TypeMap%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;(<a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/core/any/struct.TypeId.html\" title=\"struct core::any::TypeId\">TypeId</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;S&gt;)&gt; for TypeMap&lt;S&gt;<div class=\"where\">where\n    S: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;T&gt;(iter: T) -&gt; TypeMap&lt;S&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = (<a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/core/any/struct.TypeId.html\" title=\"struct core::any::TypeId\">TypeId</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;S&gt;)&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<(TypeId, Box<S>)>","quilkin::config::ConfigMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-TypeMap%3CS%3E\" class=\"impl\"><a href=\"#impl-IntoIterator-for-TypeMap%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for TypeMap&lt;S&gt;<div class=\"where\">where\n    S: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = (<a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/core/any/struct.TypeId.html\" title=\"struct core::any::TypeId\">TypeId</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;S&gt;)</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/std/collections/hash/map/struct.IntoIter.html\" title=\"struct std::collections::hash::map::IntoIter\">IntoIter</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/core/any/struct.TypeId.html\" title=\"struct core::any::TypeId\">TypeId</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;S&gt;&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; &lt;TypeMap&lt;S&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a></h4></section></summary><div class='docblock'>Creates an iterator from a value. <a href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details>","IntoIterator","quilkin::config::ConfigMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TypeMap%3CS%3E\" class=\"impl\"><a href=\"#impl-TypeMap%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S&gt; TypeMap&lt;S&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/any/trait.Any.html\" title=\"trait core::any::Any\">Any</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.custom\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">custom</a>() -&gt; TypeMap&lt;S&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new instance of <code>TypeMap</code> with a custom storage type.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the amount of entries in the map.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns an indicator whether the map is empty (no entries).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Clears all entries in the map.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains_key\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">contains_key</a>&lt;T&gt;(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    T: TypeMapKey,</div></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the map contains a value for the specified [<code>TypeMapKey</code>].</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>typemap_rev::{TypeMap, TypeMapKey};\n\n<span class=\"kw\">struct </span>Number;\n\n<span class=\"kw\">impl </span>TypeMapKey <span class=\"kw\">for </span>Number {\n    <span class=\"kw\">type </span>Value = i32;\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = TypeMap::new();\n<span class=\"macro\">assert!</span>(!map.contains_key::&lt;Number&gt;());\nmap.insert::&lt;Number&gt;(<span class=\"number\">42</span>);\n<span class=\"macro\">assert!</span>(map.contains_key::&lt;Number&gt;());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">insert</a>&lt;T&gt;(&amp;mut self, value: &lt;T as TypeMapKey&gt;::Value)<div class=\"where\">where\n    T: TypeMapKey,\n    &lt;T as TypeMapKey&gt;::Value: IntoBox&lt;S&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Inserts a new value based on its <a href=\"trait.TypeMapKey.html\"><code>TypeMapKey</code></a>.\nIf the value has been already inserted, it will be overwritten\nwith the new value.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>typemap_rev::{TypeMap, TypeMapKey};\n\n<span class=\"kw\">struct </span>Number;\n\n<span class=\"kw\">impl </span>TypeMapKey <span class=\"kw\">for </span>Number {\n    <span class=\"kw\">type </span>Value = i32;\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = TypeMap::new();\nmap.insert::&lt;Number&gt;(<span class=\"number\">42</span>);\n<span class=\"comment\">// Overwrite the value of `Number` with -42.\n</span>map.insert::&lt;Number&gt;(-<span class=\"number\">42</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.entry\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">entry</a>&lt;T&gt;(&amp;mut self) -&gt; Entry&lt;'_, T, S&gt;<div class=\"where\">where\n    T: TypeMapKey,\n    &lt;T as TypeMapKey&gt;::Value: IntoBox&lt;S&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Retrieve the entry based on its <a href=\"trait.TypeMapKey.html\"><code>TypeMapKey</code></a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get</a>&lt;T&gt;(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;&lt;T as TypeMapKey&gt;::Value&gt;<div class=\"where\">where\n    T: TypeMapKey,\n    &lt;T as TypeMapKey&gt;::Value: IntoBox&lt;S&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Retrieve a reference to a value based on its <a href=\"trait.TypeMapKey.html\"><code>TypeMapKey</code></a>.\nReturns <code>None</code> if it couldn’t be found.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>typemap_rev::{TypeMap, TypeMapKey};\n\n<span class=\"kw\">struct </span>Number;\n\n<span class=\"kw\">impl </span>TypeMapKey <span class=\"kw\">for </span>Number {\n    <span class=\"kw\">type </span>Value = i32;\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = TypeMap::new();\nmap.insert::&lt;Number&gt;(<span class=\"number\">42</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>map.get::&lt;Number&gt;().unwrap(), <span class=\"number\">42</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get_mut</a>&lt;T&gt;(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut &lt;T as TypeMapKey&gt;::Value&gt;<div class=\"where\">where\n    T: TypeMapKey,\n    &lt;T as TypeMapKey&gt;::Value: IntoBox&lt;S&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Retrieve a mutable reference to a value based on its <a href=\"trait.TypeMapKey.html\"><code>TypeMapKey</code></a>.\nReturns <code>None</code> if it couldn’t be found.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>typemap_rev::{TypeMap, TypeMapKey};\n\n<span class=\"kw\">struct </span>Number;\n\n<span class=\"kw\">impl </span>TypeMapKey <span class=\"kw\">for </span>Number {\n    <span class=\"kw\">type </span>Value = i32;\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = TypeMap::new();\nmap.insert::&lt;Number&gt;(<span class=\"number\">42</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>map.get::&lt;Number&gt;().unwrap(), <span class=\"number\">42</span>);\n<span class=\"kw-2\">*</span>map.get_mut::&lt;Number&gt;().unwrap() -= <span class=\"number\">42</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>map.get::&lt;Number&gt;().unwrap(), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">remove</a>&lt;T&gt;(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;T as TypeMapKey&gt;::Value&gt;<div class=\"where\">where\n    T: TypeMapKey,\n    &lt;T as TypeMapKey&gt;::Value: IntoBox&lt;S&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Removes a value from the map based on its [<code>TypeMapKey</code>].</p>\n<p>Returns a boolean indicating whether the value existed prior to its removal.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>typemap_rev::{TypeMap, TypeMapKey};\n\n<span class=\"kw\">struct </span>Text;\n\n<span class=\"kw\">impl </span>TypeMapKey <span class=\"kw\">for </span>Text {\n    <span class=\"kw\">type </span>Value = String;\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = TypeMap::new();\nmap.insert::&lt;Text&gt;(String::from(<span class=\"string\">\"Hello TypeMap!\"</span>));\n<span class=\"macro\">assert!</span>(map.remove::&lt;Text&gt;().is_some());\n<span class=\"macro\">assert!</span>(map.get::&lt;Text&gt;().is_none());</code></pre></div>\n</div></details></div></details>",0,"quilkin::config::ConfigMap"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[24346]}