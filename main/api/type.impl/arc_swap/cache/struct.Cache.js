(function() {
    var type_impls = Object.fromEntries([["quilkin",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Access%3C%3CT+as+Deref%3E::Target%3E-for-Cache%3CA,+T%3E\" class=\"impl\"><a href=\"#impl-Access%3C%3CT+as+Deref%3E::Target%3E-for-Cache%3CA,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, T, S&gt; Access&lt;&lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt; for Cache&lt;A, T&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&lt;Target = ArcSwapAny&lt;T, S&gt;&gt;,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&lt;Target = &lt;T as RefCnt&gt;::Base&gt; + RefCnt,\n    S: Strategy&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.load\" class=\"method trait-impl\"><a href=\"#method.load\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">load</a>(&amp;mut self) -&gt; &amp;&lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a></h4></section></summary><div class='docblock'>Loads the value from cache. <a>Read more</a></div></details></div></details>","Access<<T as Deref>::Target>","quilkin::config::filter::CachedFilterChain"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Cache%3CA,+T%3E\" class=\"impl\"><a href=\"#impl-Cache%3CA,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, T, S&gt; Cache&lt;A, T&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&lt;Target = ArcSwapAny&lt;T, S&gt;&gt;,\n    T: RefCnt,\n    S: Strategy&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>(arc_swap: A) -&gt; Cache&lt;A, T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new caching handle.</p>\n<p>The parameter is something dereferencing into an [<code>ArcSwapAny</code>] (eg. either to <a href=\"crate::ArcSwap\"><code>ArcSwap</code></a>\nor <a href=\"crate::ArcSwapOption\"><code>ArcSwapOption</code></a>). That can be [<code>ArcSwapAny</code>] itself, but that’s not very useful. But\nit also can be a reference to it or <code>Arc</code>, which makes it possible to share the\n[<code>ArcSwapAny</code>] with multiple caches or access it in non-cached way too.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.arc_swap\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">arc_swap</a>(&amp;self) -&gt; &amp;&lt;A as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a></h4></section></summary><div class=\"docblock\"><p>Gives access to the (possibly shared) cached [<code>ArcSwapAny</code>].</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.load\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">load</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\"><p>Loads the currently held value.</p>\n<p>This first checks if the cached value is up to date. This check is very cheap.</p>\n<p>If it is up to date, the cached value is simply returned without additional costs. If it is\noutdated, a load is done on the underlying shared storage. The newly loaded value is then\nstored in the cache and returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">map</a>&lt;F, U&gt;(self, f: F) -&gt; MapCache&lt;A, T, F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.reference.html\">&amp;U</a>,</div></h4></section></summary><div class=\"docblock\"><p>Turns this cache into a cache with a projection inside the cached value.</p>\n<p>You’d use this in case when some part of code needs access to fresh values of <code>U</code>, however\na bigger structure containing <code>U</code> is provided by this cache. The possibility of giving the\nwhole structure to the part of the code falls short in terms of reusability (the part of\nthe code could be used within multiple contexts, each with a bigger different structure\ncontaining <code>U</code>) and code separation (the code shouldn’t needs to know about the big\nstructure).</p>\n<h5 id=\"warning\"><a class=\"doc-anchor\" href=\"#warning\">§</a>Warning</h5>\n<p>As the provided <code>f</code> is called inside every [<code>load</code>][Access::load], this one should be\ncheap. Most often it is expected to be just a closure taking reference of some inner field.</p>\n<p>For the same reasons, it should not have side effects and should never panic (these will\nnot break Rust’s safety rules, but might produce behaviour you don’t expect).</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>arc_swap::ArcSwap;\n<span class=\"kw\">use </span>arc_swap::cache::{Access, Cache};\n\n<span class=\"kw\">struct </span>InnerCfg {\n    answer: usize,\n}\n\n<span class=\"kw\">struct </span>FullCfg {\n    inner: InnerCfg,\n}\n\n<span class=\"kw\">fn </span>use_inner&lt;A: Access&lt;InnerCfg&gt;&gt;(cache: <span class=\"kw-2\">&amp;mut </span>A) {\n    <span class=\"kw\">let </span>value = cache.load();\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"The answer is: {}\"</span>, value.answer);\n}\n\n<span class=\"kw\">let </span>full_cfg = ArcSwap::from_pointee(FullCfg {\n    inner: InnerCfg {\n        answer: <span class=\"number\">42</span>,\n    }\n});\n<span class=\"kw\">let </span>cache = Cache::new(<span class=\"kw-2\">&amp;</span>full_cfg);\nuse_inner(<span class=\"kw-2\">&amp;mut </span>cache.map(|full| <span class=\"kw-2\">&amp;</span>full.inner));\n\n<span class=\"kw\">let </span>inner_cfg = ArcSwap::from_pointee(InnerCfg { answer: <span class=\"number\">24 </span>});\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>inner_cache = Cache::new(<span class=\"kw-2\">&amp;</span>inner_cfg);\nuse_inner(<span class=\"kw-2\">&amp;mut </span>inner_cache);</code></pre></div>\n</div></details></div></details>",0,"quilkin::config::filter::CachedFilterChain"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Cache%3CA,+T%3E\" class=\"impl\"><a href=\"#impl-Clone-for-Cache%3CA,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for Cache&lt;A, T&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Cache&lt;A, T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.0/src/core/clone.rs.html#174\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","quilkin::config::filter::CachedFilterChain"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Cache%3CA,+T%3E\" class=\"impl\"><a href=\"#impl-Debug-for-Cache%3CA,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for Cache&lt;A, T&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.85.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","quilkin::config::filter::CachedFilterChain"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CA%3E-for-Cache%3CA,+T%3E\" class=\"impl\"><a href=\"#impl-From%3CA%3E-for-Cache%3CA,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, T, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;A&gt; for Cache&lt;A, T&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&lt;Target = ArcSwapAny&lt;T, S&gt;&gt;,\n    T: RefCnt,\n    S: Strategy&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(arc_swap: A) -&gt; Cache&lt;A, T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<A>","quilkin::config::filter::CachedFilterChain"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[13125]}