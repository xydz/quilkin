searchState.loadedDescShard("quilkin", 0, "Quilkin: a non-transparent UDP proxy specifically designed …\nContains the error value\nContains the success value\nMacro that can get the function name of the function the …\nImplementations and utility methods for various codecs …\nCollection types designed for use with Quilkin.\nQuilkin configuration.\nThe path to the configuration file for the Quilkin …\nFilters for processing packets.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIncludes generated Protobuf definitions from <code>tonic</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn optional log file directory path that quilkin should …\nThe file prefix used for log files\nWhether Quilkin will report any results to stdout/stderr.\nCreates a temporary file with the specified prefix in a …\nQuilkin: a non-transparent UDP proxy specifically designed …\nThe various Quilkin commands.\nThe various log format options\nThe address to bind for the admin server.\nThe path to the configuration file for the Quilkin …\nDrives the main quilkin application lifecycle using the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe airport ICAO code for the <code>region</code> of the instance. When …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn optional log file directory path that quilkin should …\nThe file prefix used for log files\nWhether Quilkin will report any results to stdout/stderr.\nThe <code>region</code> to set in the cluster map for any provider …\nThe <code>sub_zone</code> in the <code>zone</code> in the <code>region</code> to set in the …\n<code>ToString::to_string</code>, but without panic on OOM.\nThe <code>zone</code> in the <code>region</code> to set in the cluster map for any …\nGenerates JSON schema files for known filters.\nA list of one or more filter IDs to generate or ‘all’ …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe directory to write configuration files.\nPings a endpoint for a <code>amount</code> of attempts, printing the …\nThe number of pings to send to the endpoint (default: 5).\nThe quilkin endpoint to ping\nReturns the argument unchanged.\nReturns the argument unchanged.\nPing at a set interval instead of immediately after the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe timeout threshold when waiting for a ping response\nExtensions to <code>prost</code> and related crates.\nLogic for parsing and generating Quilkin Control Message …\nThe maximum length of a QCMP packet, including 2 …\nThe minimum length of a QCMP packet\nThe initation of a ping command to send to a Quilkin proxy …\nThe reply from a Quilkin proxy from a <code>Self::Ping</code> command. …\nThe set of possible QCMP commands.\nA transciever that can handle multiple simultaneous QCMP …\nIf the command is <code>Protocol::PingReply</code>, with …\nEncodes the protocol command into a buffer of bytes for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the packet’s nonce.\nParses the provided input, and attempts to parse it as a …\nAttempt to ping the address with the given timeout\nCreates a <code>Self::Ping</code> with a random nonce, should be sent …\nCreates a <code>Self::PingReply</code> from the client and server start …\nCreates a <code>Self::Ping</code> with a user-specified nonce, should …\nIf the command is <code>Protocol::PingReply</code>, with …\n<code>ToString::to_string</code>, but without panic on OOM.\nThe timestamp from when the client sent the packet.\nThe timestamp from when the client sent the ping packet.\nThe client’s nonce.\nThe client’s nonce.\nThe timestamp from when the server received the ping …\nThe timestamp from when the server sent the reply.\nCreates a buffer filled with the specified data, only used …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSplits a prefix of the specified length from the buffer …\nSplits a suffix of the specified length from the buffer …\nThe shard wasn’t locked, and the value wasn’t present …\nA view into an entry in the map. It may either be …\nThe shard was locked.\nA view into an occupied entry in the map.\nThe value was present in the map, and the lock for the …\nRepresents the result of a non-blocking read from a DashMap…\nA key value hash map where entries are associated with a …\nA view into a vacant entry in the map.\nA wrapper around the value of an entry in the map. It …\nRemoves all entries from the map\nReturns true if the map contains a value for the specified …\nReturns an entry for in-place updates of the specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to value corresponding to key.\nReturns a reference to the entry’s value. The value will …\nReturns a mutable reference to value corresponding to key. …\nReturns a mutable reference to the entry’s value. The …\nInserts a key-value pair into the map. The value will be …\nReplace the entry’s value with a new value, returning …\nSet an entry’s value. The value will be set to expire at …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the shard wasn’t locked, and the value …\nReturns whether the map currently contains no entries.\nReturns <code>true</code> if the shard was locked.\nReturns whether the map currently contains any entries.\nReturns <code>true</code> if the value was present in the map, and the …\nReturns the number of entries currently in the map.\nRemoves a key-value pair from the map.\nReturns a reference to value corresponding to key.\nIf <code>self</code> is Present, returns the reference to the value in …\nIf <code>self</code> is Present, returns the reference to the value in …\nArgs common across all components\nConfig\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe ready check and idle duration\nChannel used to indicate graceful shutdown requests\nThe number of tokens to assign to each <code>to</code> address\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe size of each token\nThe configuration of a <code>Filter</code> from either a static or …\nDynamic configuration from Protobuf.\nConfiguration for a component\nStatic configuration from YAML.\nValidation failure for a Config\nGiven a list of subscriptions and the current state of the …\nDeserializes takes two type arguments <code>Static</code> and <code>Dynamic</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates and initializes a new Config\nCreates and initializes a new Arc\nCreates a new Icao from raw bytes\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nFilter is the configuration for a single filter\nCached the filter chain, only reloading it if the filter …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe binary configuration of the filter. <strong>Must</strong> be <code>prost</code> …\nThe <code>Concatenate</code> filter’s job is to add a byte packet to …\nThe human-readable configuration of the filter. <strong>Must</strong> be …\nAn error representing failure to convert a filter’s …\nArguments needed to create a new filter.\nAn error that occurred when attempting to create a <code>Filter</code> …\nDebug logs all incoming and outgoing packets\nAlways drops a packet, mostly useful in combination with …\nAn owned pointer to a dynamic <code>FilterFactory</code> instance.\nTrait for routing and manipulating packets.\nA chain of <code>Filter</code>s to be executed in order.\nAll possible errors that can be returned from <code>Filter</code> …\nProvides the name and creation function for a given …\nThe value returned by <code>FilterFactory::create_filter</code>.\nA map of <code>FilterFactory::name</code>s to <code>DynFilterFactory</code> values.\nRegistry of all <code>Filter</code>s that can be applied in the system.\nA set of filters to be registered with a <code>FilterRegistry</code>.\nFilter for allowing/blocking traffic by IP and port.\nBalances packets over the upstream endpoints.\nA filter that implements rate limiting on packets based on …\nThe globally unique name of the filter.\nAllows a packet to pass through, mostly useful in …\nThe input arguments to <code>Filter::read</code>.\nStatically safe version of <code>Filter</code>, if you’re writing a …\nA filter that reads a metadata value as a timestamp to be …\nFilter that only allows packets to be passed to Endpoints …\nThe input arguments to <code>Filter::write</code>.\nConfiguration for the filter.\nReturns the schema for the configuration of the …\nContents of the received packet.\nContents of the received packet.\nReturns a filter based on the provided arguments.\nReturns a <code>FilterSet</code> with the filters provided through …\nThe destination of the received packet.\nThe upstream endpoints that the packet will be forwarded …\nCreates a new instance of <code>CreateFilterArgs</code> using a dynamic …\nConverts YAML configuration into its Protobuf equivalvent.\nConverts YAML configuration into its Protobuf equivalvent.\nThe upstream endpoints that the packet will be forwarded …\nConvenience method for providing a consistent error …\nCreates a new dynamic <code>FilterFactory</code> virtual table.\nCreates a new instance of <code>CreateFilterArgs</code> using a fixed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstantiates a new <code>StaticFilter</code> from the given …\nCreates and returns a new dynamic instance of <code>Filter</code> for a …\nReturns a <code>DynFilterFactory</code> if one matches <code>id</code>, otherwise …\nReturns a <code>DynFilterFactory</code> for a given <code>key</code>. Returning <code>None</code> …\nInserts factory for the specified <code>FilterFactory</code>, returning …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a by reference iterator over the set of filters.\nArbitrary values that can be passed from one filter to …\nArbitrary values that can be passed from one filter to …\nname returns the configuration name for the Filter The …\nCreate a new instance of <code>CreateFilterArgs</code>.\nCreates a new <code>ReadContext</code>.\nCreates a new <code>WriteContext</code>\nConstructs a <code>FilterInstance</code>.\nPrelude containing all types and traits required to …\n<code>Filter::read</code> is invoked when the proxy receives data from a\n<code>Filter::read</code> is invoked when the proxy receives data from a\nLoads the provided <code>FilterSet</code> into the registry of …\nReturns the <code>ConfigType</code> from the provided Option, otherwise …\nReturns the <code>ConfigType</code> from the provided Option, otherwise …\nThe source of the received packet.\nThe source of the received packet.\nValidates the filter configurations in the provided config …\nValidates the filter configurations in the provided config …\nInstantiates a new <code>StaticFilter</code> from the given …\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nCreates a new <code>FilterSet</code> with the set of <code>filter_factories</code> …\n<code>Filter::write</code> is invoked when the proxy is about to send …\n<code>Filter::write</code> is invoked when the proxy is about to send …\nThe default key under which the <code>Capture</code> filter puts the …\nTrait to implement different strategies for capturing …\nCapture from the start of the packet.\nLooks for the set of bytes at the beginning of the packet\nCapture from the start of the packet.\nLook for the set of bytes at the end of the packet\nStrategy to apply for acquiring a set of bytes in the UDP …\nCapture from the end of the packet.\nLook for the set of bytes at the end of the packet\nCapture packet data from the contents, and optionally …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe key to use when storing the captured value in the …\nThe regular expression to use for capture.\nWhether captured bytes are removed from the original …\nThe number of bytes to capture.\nThe number of bytes to capture.\nWhether captured bytes are removed from the original …\nThe capture strategy.\nThe <code>Concatenate</code> filter’s job is to add a byte packet to …\nConfig represents a <code>Concatenate</code> filter configuration.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether or not to <code>append</code> or <code>prepend</code> or <code>do nothing</code> on …\nWhether or not to <code>append</code> or <code>prepend</code> or <code>do nothing</code> on …\nA Debug filter’s configuration.\nDebug logs all incoming and outgoing packets\nReturns the argument unchanged.\nIdentifier that will be optionally included with each log …\nCalls <code>U::from(self)</code>.\n<code>pass</code> filter’s configuration.\nAlways drops a packet, mostly useful in combination with …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhether or not a matching Rule should Allow or Deny access\nMatching rules will allow packets through.\nCidr notation for an ipv6 or ipv4 netmask\nRepresents how a Firewall filter is configured for read …\nMatching rules will block packets.\nFilter for allowing/blocking traffic by IP and port.\nRepresents a generic network range. This type can have two …\nRange of matching ports that are configured against a Rule.\nInvalid min and max values for a <code>PortRange</code>.\nCombination of CIDR range, port range and action to take.\nReturns the broadcasting address of this <code>IpNetwork</code>. This …\nChecks if a given <code>IpAddr</code> is in this <code>IpNetwork</code>\nDoes this Address match the netmask? If the mask is ipv4 …\nReturns <code>true</code> if any <code>address</code> matches the provided CIDR …\nReturns true if the range contain the given <code>port</code>.\nPort ranges can be specified in yaml as either “10” as …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the IP part of a given <code>IpNetwork</code>\nReturns true if the IP in this <code>IpNetwork</code> is a valid IPv4 …\nReturns true if the IP in this <code>IpNetwork</code> is a valid IPv6 …\nReturns an iterator over the addresses contained in the …\nReturns the mask for this <code>IpNetwork</code>. That means the <code>prefix</code> …\nReturns the address of the network denoted by this …\nConstructs a new <code>IpNetwork</code> from a given <code>IpAddr</code> and a …\nCreates a new <code>Self</code>, where min is inclusive, max is …\nReturns the prefix of the given <code>IpNetwork</code>\nSerialise the <code>Self</code> into a single digit if min and max are …\nReturns the number of possible host addresses in this …\nipv4 or ipv6 CIDR address.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nConstructs a new <code>IpNetwork</code> from a network address and a …\nThe configuration for <code>load_balancer</code>.\nSend packets to endpoints based on hash of source IP and …\nBalances packets over the upstream endpoints.\nPolicy represents how a <code>load_balancer</code> distributes packets …\nSend packets to endpoints chosen at random.\nSend packets to endpoints in turns.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConfig represents a self’s configuration.\nA filter that implements rate limiting on packets based on …\nThe default session timeout.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe maximum number of packets allowed to be forwarded by …\nThe duration in seconds during which <code>max_packets</code> applies. …\nA specific match branch. The filter is run when <code>value</code> …\nConfiguration for <code>Match</code>.\nConfiguration for a specific direction.\nThe behaviour when the none of branches match. Defaults to …\nList of filters to compare and potentially run if any …\nThe behaviour for when none of the <code>branches</code> match.\nThe filter to run on successful matches.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe key for the metadata to compare against.\nConfiguration for <code>Filter::read</code>.\nConfiguration for <code>Filter::write</code>.\nThe value to compare against the dynamic metadata.\n<code>pass</code> filter’s configuration.\nAllows a packet to pass through, mostly useful in …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConfig represents a self’s configuration.\nA filter that reads a metadata value as a timestamp to be …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe metadata key to read the UTC UNIX Timestamp from.\nObserves the duration since a timestamp stored in <code>metadata</code> …\nFilter that only allows packets to be passed to Endpoints …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nthe key to use when retrieving the token from the Filter’…\n<code>ToString::to_string</code>, but without panic on OOM.\n“event” is used as a label for Metrics that can apply …\nContains the error value\nContains the success value\nLabel value for <code>DIRECTION_LABEL</code> for <code>read</code> events\nA specialized Result type for prometheus.\nLabel value for <code>DIRECTION_LABEL</code> for <code>write</code> events\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a generic metrics options. Use <code>filter_opts</code> instead …\nRegisters the current metric collector with the provided …\nRegisters the current metric collector with the provided …\nReturns the <code>Registry</code> containing all the metrics registered …\nThe same as [<code>DualStackSocket</code>] but uses epoll instead of …\nAn ipv6 socket that can accept and send data from either a …\nTCP listener for a GRPC service, always binds to the local …\nBinds a TCP listener, if <code>None</code> is passed, binds to an …\nTypes representing where the data is the sent.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the underlying std library TCP listener.\nReturns the listener as a tokio listener.\nRetrieves the local address the listener is bound to\nPhoenix Network Coordinate System\nRetrieves the port the listener is bound to\nRepresents a full snapshot of all clusters.\nCreates a map of tokens -&gt; address for the current set\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new endpoint set, calculating a unique version …\n<code>ToString::to_string</code>, but without panic on OOM.\nBumps the version, calculating a hash for the entire …\nUnique version for this endpoint set\nCreates a new endpoint set with the provided version hash, …\nReturns the value of <code>config</code>, or the default value if <code>config</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nNested message and enum types in <code>Host</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the value of <code>label</code>, or the default value if <code>label</code> …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nThe kind of address, such as Domain Name or IP address. …\nA destination endpoint with any associated metadata.\nA valid socket address. This differs from …\nThe location of an <code>Endpoint</code>.\nMetadata specific to endpoints.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA valid name or IP address that resolves to a address.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKnown Quilkin metadata.\nCreates a new <code>Endpoint</code> with no metadata.\nReturns the port for the endpoint address, or <code>0</code> if no port …\nThe port of the socket address, if present.\nReturns the socket address for the endpoint, resolving any …\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nUser created metadata.\nCreates a new <code>Endpoint</code> with the specified <code>metadata</code>.\nShared state between <code>Filter</code>s during processing for a …\nA key in the metadata table.\nRepresents a view into the metadata object attached to …\nReference to a metadata value.\nA literal value or a reference to a value in a metadata …\nReturns the inner <code>String</code> value of <code>self</code> if it matches …\nReturns the inner <code>String</code> value of <code>self</code> if it matches …\nReturns the inner <code>String</code> value of <code>self</code> if it matches …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKnown Quilkin metadata.\nResolves a symbol into a <code>Value</code>, using <code>ctx</code> for any …\nTries to <code>Self::resolve</code> the symbol to a <code>bytes::Bytes</code>, …\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nUser created metadata.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nRepresents the required arguments to run a worker task that\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nID of the worker.\nWe have two cases in the proxy where io-uring is used that …\nA simple wrapper around eventfd\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe NIC will be determined from the set of available NICs, …\nSpecifies a NIC by index, setup will fail if the index isn…\nSpecifies a NIC by name, setup will fail if a NIC with …\nUser supplied configuration\nThe external port that downstream clients use to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum amount of memory, in bytes, that the memory …\nThe NIC to attach to\nThe port QCMP packets can be sent to\nRequires that the chosen NIC supports …\nRequires that the chosen NIC supports <code>XDP_ZEROCOPY</code>\nAttempts to setup XDP by querying NIC support and …\nDetaches the eBPF program from the attacked NIC and …\nThe entrypoint into the XDP I/O loop.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nThe external port is how we determine if packets come from …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresentation of an immutable set of bytes pulled from …\nRepresentation of an mutable set of bytes pulled from the …\nReturns the underlying slice of bytes representing the …\nReturns an immutable version of the packet, this allows …\nReturns whether the given packet is empty.\nReturns the size of the packet.\nSpawns a background task that sits in a loop, receiving …\nA simple packet queue that signals when a packet is pushed\nThe asn info for the sender, used for metrics\nThe packet data being sent\nThe destination address of the packet\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPushes a packet onto the queue to be sent, signalling a …\nThe network coordinates of a node in the phoenix system.\nAn implementation of measuring the network difference …\nA <code>Phoenix</code> instance maintains a virtual coordinate space …\nThe amount of time the check will change by depending on …\nStarts the background update task to continously sample …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLatency for a packet travelling to a given target …\nInform about bad nodes that don’t respond to pings.\nThe range at which continually update the nodes …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets the difference between this node and <code>address</code>, …\nConstructs a new <code>Phoenix</code> builder.\nLatency for a packet arriving from a given target …\nThe threshold at which the path to a node is consider …\nSets the percentage of nodes to regularly measure at …\nSession encapsulates a UDP stream session\nResponsible for managing sending processed traffic to its …\nA data structure that is responsible for holding sessions, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new session pool, it’s created with an <code>Arc</code> …\nSends packet data to the appropiate session based on its …\nReturns a map of active sessions.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nThe available xDS source provider.\nIf specified, filters the available gameserver addresses …\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdds the required typemap entries to the config depending …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf specified, additionally filters the gameserver address …\nThe <code>GameServer</code> has been allocated to a session\nThe Pod for the <code>GameServer</code> is being created.\nOutput all messages including debug messages.\nPrioritise allocating <code>GameServer</code>s on Nodes with the least …\nThe system will choose an open port for the <code>GameServer</code> in …\nSomething has gone wrong with the <code>GameServer</code> and it cannot …\nOnly output error messages.\nThe spec for a <code>Fleet</code>. More info: …\nThe status of a Fleet. More info: …\nAuto-generated derived type for <code>GameServerSpec</code> via …\nDefines a set of Ports that are to be exposed via the …\nThe status for a <code>GameServer</code> resource.\nThe port that was allocated to a <code>GameServer</code>.\nSpec for a <code>GameServer</code> resource.\nOutput all messages except for debug messages.\nPrioritise allocating <code>GameServer</code>s on Nodes with the most …\nDynamically sets the container port to the same value as …\nA dynamically allocating <code>GameServer</code> is being created, an …\nThe <code>GameServer</code> is ready to take connections from game …\nThe <code>GameServer</code> has declared that it is ready\nThe <code>GameServer</code> is reserved and therefore can be allocated …\nWe have determined that the Pod has been scheduled in the …\nThe strategy that a <code>Fleet</code> &amp; <code>GameServer</code>s will use when …\nParameters for the Agones SDK Server sidecar container\nThe <code>GameServer</code> has shutdown and everything needs to be …\nThe Pods for the <code>GameServer</code> are being created but are not …\nThe user defines the host port to be used in the …\nThe <code>GameServer</code> has failed its health checks\nContainer specifies which Pod container is the game …\nThe name of the container on which to open the port. …\nThe port that is being opened on the specified container’…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe port on which the SDK Server binds the gRPC server to …\nConfigures health checking\nThe port exposed on the host for clients to connect to\nThe port on which the SDK Server binds the HTTP gRPC …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe log level for SDK server (sidecar) logs. Defaults to …\nName is the descriptive name of the port\nSpec based constructor for derived custom resource\nDefines the policy for how the <code>Self::host_port</code> is …\nPorts are the array of ports that can be exposed via the …\nProtocol is the network protocol being used. Defaults to …\nScheduling strategy. Defaults to “Packed”\nSpecifies parameters for the Agones SDK Server sidecar …\nThe spec for a <code>GameServer</code> resource. More info: …\nThe current state of a <code>GameServer</code>.\nDescribes the Pod that will be created for the <code>GameServer</code>.\nTemplate for a <code>GameServer</code> resource.\nXDP (eXpress Data Path) options\nSets the xDS service port.\nForces the use of TX checksum offload\nForces the use of XDP.\nForces the use of <code>XDP_ZEROCOPY</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe identifier for an instance. Defaults to $HOSTNAME if …\nAdds the required typemap entries to the config depending …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum amount of memory mapped for packet buffers, in …\nEnables the mDS service.\nSets the mDS service port.\nThe name of the network interface to bind the XDP …\nEnables the Phoenix service.\nSets the Phoenix service port.\nEnables the QCMP service.\nSets the UDP service port.\nThe main entrypoint for listening network servers. When …\nLaunches the user space implementation of the packet …\nEnables the UDP service.\nSets the UDP service port.\nAmount of UDP workers to run.\nEnables the xDS service.\nSets the xDS service port.\nReceiver for a shutdown event.\nAdapter method to create a <code>CancellationToken</code> that will be …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new handler for shutdown signal (e.g. SIGTERM, …\nA UTC timestamp\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets the current Unix timestamp\nGets the current Unix timestamp in nanoseconds.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")